; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "PacMan"
#define MyAppVersion "3.0"
#define MyAppPublisher "ESPE"
#define MyAppURL "https://www.espe.edu.ec"
#define MyAppExeName "MenuPrincipal.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D3C601D9-F8CA-452E-9C89-37C8A6E0DDD1}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DefaultGroupName={#MyAppName}
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputBaseFilename=InstaladorPacMan
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Tercer Nivel\Estructura de Datos y Algoritmos\Programas\0822_ProyectoP3_Pacman\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Tercer Nivel\Estructura de Datos y Algoritmos\Programas\0822_ProyectoP3_Pacman\keys.txt"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[Code]
var 
  {UserPage: TInputQueryWizardPage;}  
  KeyPage: TInputQueryWizardPage;
  ProgressPage: TOutputProgressWizardPage;

procedure InitializeWizard;
begin
  { Create the pages }


  KeyPage := CreateInputQueryPage(wpWelcome,
    'Licencia de Activación', 'Licencia del PacMan Algorítmico',
    'Especifique la licencia que vino con su PacMan Algorítmico. ' +
    'Consulte con su proveedor si no posee la licencia.');
  KeyPage.Add('Licencia de Activación:', False);
  ProgressPage := CreateOutputProgressPage('Licencia de Activación',
    'Existen 5 Licencias Válidas');

  { Set default values, using settings that were stored last time if possible }

 
end;

var LinesKeys: TArrayOfString;
var key1: string;
var key2: string;
var key3: string;
var key4: string;
var key5: string;
function ReadFileKeys(const FileName: string; out Lines: TArrayOfString) : Boolean;
var  
    FileLines: TArrayOfString;
begin
    
    Result := LoadStringsFromFile(FileName, FileLines);

    if Result then
       Lines:=  FileLines;
   
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  I: Integer;
  Licencia: string;

begin 
  
  
  if ReadFileKeys('C:\Tercer Nivel\Estructura de Datos y Algoritmos\Programas\0822_ProyectoP3_Pacman\keys.txt',LinesKeys) then
  begin
    key1:=LinesKeys[0];
    key2:=LinesKeys[1];
    key3:=LinesKeys[2];
    key4:=LinesKeys[3];
    key5:=LinesKeys[4];
  end;
    

  { Validate certain pages before allowing the user to proceed 
  if CurPageID = UserPage.ID then begin
    if UserPage.Values[0] = '' then begin
      MsgBox('You must enter your name.', mbError, MB_OK);
      Result := False;
    end else begin
      
      Result := True;
    end;
  end else    }
  
  if CurPageID = KeyPage.ID then begin
    { Just to show how 'OutputProgress' pages work.
      Always use a try..finally between the Show and Hide calls as shown below. }
    ProgressPage.SetText('Autorizando Licencia', '');
    ProgressPage.SetProgress(0, 0);
    ProgressPage.Show;
    try
      for I := 0 to 10 do begin
        ProgressPage.SetProgress(I, 10);
        Sleep(100);
      end;
    finally
      ProgressPage.Hide;
    end;
    {if GetSHA1OfString('codedlg' + KeyPage.Values[0]) = '8013f310d340dab18a0d0cda2b5b115d2dcd97e4' then }
    if   KeyPage.Values[0]=key1 then
      Result := True
      else if  KeyPage.Values[0]=key2 then
            Result := True
            else if  KeyPage.Values[0]=key3 then
              Result := True
              else if  KeyPage.Values[0]=key4 then
                Result := True
                else if  KeyPage.Values[0]=key5 then
                  Result := True
    else begin
      MsgBox('Ingrese una Licencia Válida (Recuerde que hay solamente 5.). p.ej.: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX', mbError, MB_OK);
      Result := False;
    end;
  end else
    Result := True;
end;





